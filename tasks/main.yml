---
- name: create ext volume for data
  file: state=directory path={{ ext_grafana_data_volume }} owner=472 group=472

- name: create ext volume for conf
  file: state=directory path={{ ext_grafana_conf_volume }}

- name: put grafana.ini
  template: src=grafana.ini dest={{ ext_grafana_conf_volume }}/grafana.ini

- name: create provisioning folder
  file: state=directory path={{ ext_grafana_provisioning_volume }}

- name: create provisioning/datasources folder
  file: state=directory path={{ ext_grafana_provisioning_volume }}/datasources

- name: put datasource.yml
  template: src=datasource.yml dest={{ ext_grafana_provisioning_volume }}/datasources/datasource.yml
  when: grafana_auto_prometheus_config

- name: create provisioning/dashboards folder
  file: state=directory path={{ ext_grafana_provisioning_volume }}/dashboards

- name: put provider.yml
  template: src=provider.yml dest={{ ext_grafana_provisioning_volume }}/dashboards/provider.yml
  when: grafana_auto_dashboards_config

- name: create /root/dashboards
  file: state=directory path=/root/dashboards
  when: grafana_auto_dashboards_config

- name: checkout grafonnet
  git: repo=https://github.com/grafana/grafonnet-lib.git dest=/root/dashboards/grafonnet-lib version=master
  when: grafana_auto_dashboards_config

- name: combine all dashboards to a single list
  set_fact:
    grafana_dashboards_grafonnet_list: "{{ grafana_dashboards_grafonnet_list + [ vars[item] ] }}"
  with_items: "{{ grafana_dashboards_grafonnet }}"

- name: put grafonnet dashboards
  template: src=dashboard.jsonnet dest=/root/dashboards/{{ item.file_name }}.jsonnet
  when: grafana_auto_dashboards_config
  with_items: "{{ grafana_dashboards_grafonnet_list }}"

- name: create dashboards folder
  file: state=directory path={{ ext_grafana_dashboards_volume }}

- name: generate the dashboard
  shell: "cd /root/dashboards && docker run --rm -i -v `pwd`:/src mexisme/jsonnet /jsonnet -J /src/grafonnet-lib
           /src/{{ item.file_name }}.jsonnet > {{ ext_grafana_dashboards_volume }}/{{ item.file_name }}.json"
  when: grafana_auto_dashboards_config
  with_items: "{{ grafana_dashboards_grafonnet_list }}"

- name: create plugins folder
  file: state=directory path={{ ext_grafana_plugins_volume }}

- name: setup unzip
  apt: name=unzip
  when: "ansible_os_family == 'Debian'"

- name: setup unzip
  yum: name=unzip
  when: "ansible_os_family == 'RedHat'"

- name: download the Status Dot Panel plugin
  get_url: url=https://grafana.com/api/plugins/btplc-status-dot-panel/versions/0.2.4/download dest=/root/BT-OpenSource-bt-grafana-status-dot-f19fba7.zip

- name: unpack the Status Dot Panel plugin
  unarchive: remote_src=yes src=/root/BT-OpenSource-bt-grafana-status-dot-f19fba7.zip dest={{ ext_grafana_plugins_volume }}

- name: download the Flant plugin
  get_url: url=https://github.com/flant/grafana-statusmap/archive/master.zip dest=/root/flant-grafana-statusmap.zip

- name: unpack the Grafana Statusmap plugin
  unarchive: remote_src=yes src=/root/flant-grafana-statusmap.zip dest={{ ext_grafana_plugins_volume }}

- name: download the Raintank worldPing plugin
  get_url: url=https://grafana.com/api/plugins/raintank-worldping-app/versions/1.2.6/download dest=/root/raintank-worldping-app-v1.2.6-0-gb88a0d6.zip

- name: unpack the Raintank worldPing plugin
  unarchive: remote_src=yes src=/root/raintank-worldping-app-v1.2.6-0-gb88a0d6.zip dest={{ ext_grafana_plugins_volume }}

- name: start a grafana container
  docker_container:
    image: grafana/grafana
    state: started
    read_only: yes
    recreate: yes
    restart_policy: always
    hostname: "{{ ansible_hostname }}-{{ grafana_container_name }}"
    ports:
      - "{{ grafana_container_host_address }}:{{ grafana_port }}:3000"
    volumes:
      - "{{ ext_grafana_data_volume }}:/var/lib/grafana"
      - "{{ ext_grafana_conf_volume }}/grafana.ini:/etc/grafana/grafana.ini"
      - "{{ ext_grafana_provisioning_volume }}:/etc/grafana/provisioning"
      - "{{ ext_grafana_dashboards_volume }}:/var/lib/grafana/dashboards"
      - "{{ ext_grafana_plugins_volume }}:/var/lib/grafana/plugins"
      - "{{ ext_grafana_tmp_volume }}:/var/tmp"
    name: "{{ grafana_container_name }}"
  tags:
    - docker

- name: get the dashboard ID
  uri:
    url: http://{{ grafana_container_host_address }}:{{ grafana_port }}/api/dashboards/db/{{ grafana_default_dashboard_slug }}
    return_content: yes
  register: dashboard
  retries: 20
  delay: 1
  until: dashboard is not failed
  when: "grafana_default_dashboard_slug is defined and grafana_anon_access_enabled"

- name: set the default dashboard ID
  uri:
    url: http://{{ grafana_container_host_address }}:{{ grafana_port }}/api/user/preferences
    method: PUT
    body_format: json
    body: '{"homeDashboardId": {{ dashboard.json.dashboard.id }} }'
  when: "grafana_default_dashboard_slug is defined and grafana_anon_access_enabled"
